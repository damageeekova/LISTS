    #include <iostream>
    using namespace std;

    struct node{
        double data;
        node* next = NULL;
    };

    class STACK {
        node* head;

        public:

        STACK():head (0){}

        void Push(double new_data){
            node* temp = new node;
            temp->data = new_data;
            temp->next = head;
            head = temp;
        }

        STACK (STACK&A) {
            head=NULL;
            node* temp = A.head;
            while(temp){
                Push(temp->data);
                temp = temp->next;
            }
        }


        double Pop(){
        if (head == NULL){
            cout << " Stack is empty ";
            return 0;
        }
        else {
            node* temp = head;
            head = head -> next;
            double data = temp->data;
            delete temp;
            return data;
        }
        }

        double front(STACK& A){
            STACK rty(A);
            return rty.Pop () ;
        }

        bool Empty(){
            if (head==0)
                return 1;
            else
                return 0;
        }

        void print(){
            node* temp = head;
            while(temp){
                cout << temp->data << " ";
                temp = temp->next;
        }
        }


        ~STACK(){
             node *temp = head;
             while (temp!=NULL){
                  head = head->next;
                  delete temp;
                  temp = head;
             }
        }
        };



    int main(){
        double x;
        STACK Stack;
        cout << "Enter stack (the last one 0):";
        while (x!=0){
            cin >> x;
            Stack.Push (x);
            }
        Stack.Pop ();
        Stack.print();
        cout << endl;
        if (Stack.Empty()==1)
            cout << "Stack is empty";
        else
            cout << "Stack has elements ";
        cout << endl;
        STACK Copy(Stack);
        Copy.print ();
        cout << endl;
        cout << Stack.Pop() << endl;
        cout << Stack.front(Stack) << endl;
        return 0;
    }
